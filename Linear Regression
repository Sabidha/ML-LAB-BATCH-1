{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM5ixFq4UT9/voumcU3qIEh"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yg-d405QFmbv","executionInfo":{"status":"ok","timestamp":1753690416882,"user_tz":-330,"elapsed":54,"user":{"displayName":"Sabidha","userId":"09060403662221030338"}},"outputId":"35914014-8521-4012-d680-4e203b6e5a8d"},"outputs":[{"output_type":"stream","name":"stdout","text":["(4,)\n","[[  12   23   45]\n"," [  13   78   54]\n"," [  56   98 3436]]\n"]}],"source":["import numpy as np\n","x=np.array([1,2,3,4])\n","y=np.array([[12,23,45],[13,78,54],[56,98,3436]])\n","print(x.shape)\n","print(y)"]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","import numpy as np\n","x=np.array([[10],[20],[30],[40],[50],[60],[70],[80],[90],[100]])\n","y=np.array([1,0,4,2,65,3,2,5,8,5])\n","x_train , x_test , y_train , y_test = train_test_split(x,y,test_size=0.3,random_state=2)\n","print(\"X-train\",x_train)\n","print(\"X-test\",x_test)\n","print(\"Y-train\",y_train)\n","print(\"Y-test\",y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0S46KICTGVh0","executionInfo":{"status":"ok","timestamp":1753691092194,"user_tz":-330,"elapsed":14,"user":{"displayName":"Sabidha","userId":"09060403662221030338"}},"outputId":"48ebfead-3a18-400e-eea5-04667585d75d"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["X-train [[ 10]\n"," [ 80]\n"," [ 30]\n"," [ 40]\n"," [ 70]\n"," [100]\n"," [ 90]]\n","X-test [[50]\n"," [20]\n"," [60]]\n","Y-train [1 5 4 2 2 5 8]\n","Y-test [65  0  3]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","arr=np.array([1,2,43,65,7])\n","result=pd.DataFrame(arr , columns=['Marks'])\n","result2=pd.Series(arr)\n","print(arr)\n","print(result)\n","print(result2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RLL7RDUuI5MM","executionInfo":{"status":"ok","timestamp":1753691927418,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sabidha","userId":"09060403662221030338"}},"outputId":"0580bccf-a416-42ba-d465-886bfa3f1b5f"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 1  2 43 65  7]\n","   Marks\n","0      1\n","1      2\n","2     43\n","3     65\n","4      7\n","0     1\n","1     2\n","2    43\n","3    65\n","4     7\n","dtype: int64\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error,r2_score\n","x=np.array([[10],[20],[30],[40],[50]])\n","y=np.array([3,2,6,2,7]).reshape(-1, 1)\n","\n","model=LinearRegression()\n","model.fit(x,y)\n","new=np.array([9,12]).reshape(-1, 1)\n","pre=model.predict(new)"],"metadata":{"id":"hjD7S04aLPuN","executionInfo":{"status":"ok","timestamp":1753692588220,"user_tz":-330,"elapsed":8,"user":{"displayName":"Sabidha","userId":"09060403662221030338"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error,r2_score\n","x=np.array([1,2,3,4,5]).reshape(-1,1)\n","y=np.array([1.2,1.8,2.6,3.2,3.8])\n","\n","model = LinearRegression()\n","model.fit(x,y)\n","\n","new_value=np.array([6,7]).reshape(-1,1)\n","pred = model.predict(new_value)\n","\n","print(f\"Predicted value:{pred}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mE7vgNQvOnYt","executionInfo":{"status":"ok","timestamp":1753692994811,"user_tz":-330,"elapsed":11,"user":{"displayName":"Sabidha","userId":"09060403662221030338"}},"outputId":"c8dc9fcc-8b4f-4459-971b-a652ce8ca7ca"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted value:[4.5  5.16]\n"]}]},{"cell_type":"code","source":["from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error,r2_score\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import numpy as np\n","x=np.array([1,2,3,4,5]).reshape(-1,1)\n","y=np.array([12,18,22,28,35])\n","\n","model=LinearRegression()\n","model.fit(x,y)\n","\n","new_value=np.array([7,8]).reshape(-1,1)\n","pred = model.predict(new_value)\n","\n","print(\"Predicted value:\",pred);"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eEe9JNC7Qeml","executionInfo":{"status":"ok","timestamp":1753693632824,"user_tz":-330,"elapsed":7,"user":{"displayName":"Sabidha","userId":"09060403662221030338"}},"outputId":"a6cfb402-5b16-4c7b-d3fc-374edf230070"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted value: [45.4 51. ]\n"]}]},{"cell_type":"code","source":["\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.datasets import load_boston\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","boston = load_boston()\n","X = pd.DataFrame(boston.data, columns=boston.feature_names)\n","y = pd.Series(boston.target)\n","\n","\n","print(\"Features shape:\", X.shape)\n","print(\"Target shape:\", y.shape)\n","\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","\n","model = LinearRegression()\n","model.fit(X_train, y_train)\n","\n","\n","y_pred = model.predict(X_test)\n","\n","\n","mse = mean_squared_error(y_test, y_pred)\n","r2 = r2_score(y_test, y_pred)\n","\n","print(f\"\\nMean Squared Error: {mse:.2f}\")\n","print(f\"RÂ² Score: {r2:.2f}\")\n","\n","plt.scatter(y_test, y_pred, color='blue')\n","plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')\n","plt.xlabel('Actual Prices')\n","plt.ylabel('Predicted Prices')\n","plt.title('Actual vs Predicted Prices')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"GQAqpwxkRgmM","executionInfo":{"status":"error","timestamp":1753693636601,"user_tz":-330,"elapsed":89,"user":{"displayName":"Sabidha","userId":"09060403662221030338"}},"outputId":"db1ed9d4-90d8-46fb-8c70-4f555094026d"},"execution_count":22,"outputs":[{"output_type":"error","ename":"ImportError","evalue":"\n`load_boston` has been removed from scikit-learn since version 1.2.\n\nThe Boston housing prices dataset has an ethical problem: as\ninvestigated in [1], the authors of this dataset engineered a\nnon-invertible variable \"B\" assuming that racial self-segregation had a\npositive impact on house prices [2]. Furthermore the goal of the\nresearch that led to the creation of this dataset was to study the\nimpact of air quality but it did not give adequate demonstration of the\nvalidity of this assumption.\n\nThe scikit-learn maintainers therefore strongly discourage the use of\nthis dataset unless the purpose of the code is to study and educate\nabout ethical issues in data science and machine learning.\n\nIn this special case, you can fetch the dataset from the original\nsource::\n\n    import pandas as pd\n    import numpy as np\n\n    data_url = \"http://lib.stat.cmu.edu/datasets/boston\"\n    raw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n    data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\n    target = raw_df.values[1::2, 2]\n\nAlternative datasets include the California housing dataset and the\nAmes housing dataset. You can load the datasets as follows::\n\n    from sklearn.datasets import fetch_california_housing\n    housing = fetch_california_housing()\n\nfor the California housing dataset and::\n\n    from sklearn.datasets import fetch_openml\n    housing = fetch_openml(name=\"house_prices\", as_frame=True)\n\nfor the Ames housing dataset.\n\n[1] M Carlisle.\n\"Racist data destruction?\"\n<https://medium.com/@docintangible/racist-data-destruction-113e3eff54a8>\n\n[2] Harrison Jr, David, and Daniel L. Rubinfeld.\n\"Hedonic housing prices and the demand for clean air.\"\nJournal of environmental economics and management 5.1 (1978): 81-102.\n<https://www.researchgate.net/publication/4974606_Hedonic_housing_prices_and_the_demand_for_clean_air>\n","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-22-3092736327.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdatasets\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mload_boston\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodel_selection\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear_model\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mLinearRegression\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/datasets/__init__.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(name)\u001b[0m\n\u001b[1;32m    159\u001b[0m             \"\"\"\n\u001b[1;32m    160\u001b[0m         )\n\u001b[0;32m--> 161\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mImportError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    162\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mglobals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mImportError\u001b[0m: \n`load_boston` has been removed from scikit-learn since version 1.2.\n\nThe Boston housing prices dataset has an ethical problem: as\ninvestigated in [1], the authors of this dataset engineered a\nnon-invertible variable \"B\" assuming that racial self-segregation had a\npositive impact on house prices [2]. Furthermore the goal of the\nresearch that led to the creation of this dataset was to study the\nimpact of air quality but it did not give adequate demonstration of the\nvalidity of this assumption.\n\nThe scikit-learn maintainers therefore strongly discourage the use of\nthis dataset unless the purpose of the code is to study and educate\nabout ethical issues in data science and machine learning.\n\nIn this special case, you can fetch the dataset from the original\nsource::\n\n    import pandas as pd\n    import numpy as np\n\n    data_url = \"http://lib.stat.cmu.edu/datasets/boston\"\n    raw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n    data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\n    target = raw_df.values[1::2, 2]\n\nAlternative datasets include the California housing dataset and the\nAmes housing dataset. You can load the datasets as follows::\n\n    from sklearn.datasets import fetch_california_housing\n    housing = fetch_california_housing()\n\nfor the California housing dataset and::\n\n    from sklearn.datasets import fetch_openml\n    housing = fetch_openml(name=\"house_prices\", as_frame=True)\n\nfor the Ames housing dataset.\n\n[1] M Carlisle.\n\"Racist data destruction?\"\n<https://medium.com/@docintangible/racist-data-destruction-113e3eff54a8>\n\n[2] Harrison Jr, David, and Daniel L. Rubinfeld.\n\"Hedonic housing prices and the demand for clean air.\"\nJournal of environmental economics and management 5.1 (1978): 81-102.\n<https://www.researchgate.net/publication/4974606_Hedonic_housing_prices_and_the_demand_for_clean_air>\n","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import train_test_split\n","import matplotlib.pyplot as plt\n","\n","crop_yield = np.array([2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0]).reshape(-1, 1)\n","\n","prices = np.array([150, 160, 170, 180, 190, 200, 210, 220])\n","\n","X_train, X_test, y_train, y_test = train_test_split(crop_yield, prices, test_size=0.2, random_state=42)\n","\n","model = LinearRegression()\n","\n","model.fit(X_train, y_train)\n","\n","y_pred = model.predict(X_test)\n","\n","for i in range(len(X_test)):\n","    print(f\"Crop yield: {X_test[i][0]} tons/ha, Actual price: ${y_test[i]}, Predicted price: ${y_pred[i]:.2f}\")\n","\n","plt.scatter(crop_yield, prices, color='blue', label='Actual prices')\n","plt.plot(crop_yield, model.predict(crop_yield), color='red', label='Regression line')\n","plt.xlabel('Crop Yield (tons/ha)')\n","plt.ylabel('Price ($/ton)')\n","plt.title('Crop Yield vs Price Linear Regression')\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"SC4iEgdnS08d","executionInfo":{"status":"ok","timestamp":1753693773804,"user_tz":-330,"elapsed":530,"user":{"displayName":"Sabidha","userId":"09060403662221030338"}},"outputId":"eef797f9-9591-4e1b-acb8-79befa8462a6"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Crop yield: 3.0 tons/ha, Actual price: $160, Predicted price: $160.00\n","Crop yield: 5.0 tons/ha, Actual price: $200, Predicted price: $200.00\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}